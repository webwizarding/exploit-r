from flask import Flask, request, render_template_string, redirect, url_for
from urllib.parse import urlencode

app = Flask(__name__)

# Sample HTML content with a vulnerable link
html_content = """
<html>
    <head><title>Cluster Manager</title></head>
    <body>
        <h1>Cluster Manager Dashboard</h1>
        <a href="/cluster-manager?Alias=Default">Manage Cluster</a>
    </body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(html_content)

@app.route('/cluster-manager')
def cluster_manager():
    alias = request.args.get('Alias', 'Default')

    # Vulnerable point where the alias is directly used in the response
    response_html = f"""
    <html>
        <head><title>Cluster Manager - {alias}</title></head>
        <body>
            <h1>Managing Cluster: {alias}</h1>
            <p>Cluster management is now active for Alias: {alias}</p>
        </body>
    </html>
    """
    return render_template_string(response_html)

@app.route('/set-alias')
def set_alias():
    alias = request.args.get('Alias', 'Default')
    return redirect(url_for('cluster_manager') + '?' + urlencode({'Alias': alias}))

if __name__ == '__main__':
    app.run(debug=True)
